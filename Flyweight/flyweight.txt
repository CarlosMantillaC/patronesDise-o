/*
Categoria: Estructural
Proposito: Usar el compartir para soportar grandes cantidades de objetos de
manera eficiente en memoria.
Como funciona:
Divide el estado del objeto en interno (compartido) y externo (no compartido)
Reutiliza objetos compartidos cuando es posible.
Ejemplo:
Un editor de texto que comparte objetos de caracter para cada letra que aparece.
*/

//Clase Flyweight
clase Circulo:
    constructor(color):
        this.color = color
    
    metodo dibujar(x, y):
        imprimir "Dibujando un circulo" + color " en " + x "," + y


//Fabrica que maneja el pool de objetos Circulo
clase FabricaCirculos:
    circulos: Circulo

    constructor():
        circulos = [:]
    
    metodo obtenerCirculo(color):
        si circulos.contiene[color]:
            return circulos[color]
        sino:
            nuevoCirculo = new Circulo(color)
            circulos[color] = nuevoCirculo
            retornar nuevoCirculo


//Uso del patron
fabrica = new FabricaCirculos()

rojo1 = fabrica.obtenerCirculo("Rojo")
rojo1.dibujar(10,20)

rojo2 = fabrica.obtenerCirculo("Rojo")
rojo2.dibujar(30,20)