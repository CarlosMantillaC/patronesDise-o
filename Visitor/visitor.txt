/*
El patron Visitor permite agregar operaciones a una estructura de objetos sin modificar sus clases.
Se usa cuando tienes una estructura de objetos compleja y necesitas realizar distintas operaciones
sobre sus elementos, sin romper el principio de abierto/cerrado.

Agrega nuevas operaciones sin modificar las clases existentes.
Separa lógica de negocio de estructura de datos.
Facilita el mantenimiento de codigo en jerarquías complejas.
*/


//Interfaz del visitor
interfaz FiguraVisitor:
    metodo visitarCirculo()
    metodo visitarRectangulo()


//Interfaz de elementos que aceptan un visitor
interfaz Figura:
    metodo aceptar()


//Clases concretas de elementos
clase Circulo implementa Figura:
    
    constructor(radio):
        this.radio = radio
    
    metodo aceptar(visitor: FiguraVisitor):
        visitor.visitarCirculo(this)

clase Rectangulo implementa Figura:

    constructor(ancho, alto):
        this.ancho = ancho
        this.alto = alto

    metodo aceptar(visitor: FiguraVisitor):
        visitor.visitarRectangulo(this)


//Visitor Concreto
clase CalcularAreaVisitor implementa FiguraVisitor:

    metodo visitarCirculo(circulo: Circulo):
        area = 3.14 * (circulo.radio * circulo.radio)
        imprimir "Área del círculo: \(area)"

    metodo visitarRectangulo(rectangulo: Rectangulo):
        area = rectangulo.ancho * rectangulo.alto
        imprimir "Área del rectángulo: \(area)"


//Uso del patron
circulo = new Circulo(5)
rectangulo = new Rectangulo(3,4)

visitorArea = CalcularAreaVisitor()

circulo.aceptar(visitorArea)
rectangulo.aceptar(visitorArea)