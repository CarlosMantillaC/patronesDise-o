/*
Categoria: Comportamental
Proposito: Definir una familia de algoritmos, encapsularlos y hacerlos
intercambiables. Permite que el algoritmo varie independientemente.
Como funciona:
Se define una interfaz comun para todas las estrategias.
El contexto utiliza una estrategia concreta.
Ejemplo:
Diferentes algoritmos de ordenamiento que se pueden usar segun la necesidad.
*/


//Interfaz
interfaz EstrategiaPago:
    metodo pagar()


//Estrategias Concretas
clase PagoConTarjetaCredito implementa EstrategiaPago:

    metodo pagar(monto):
        imprimir "Pagando " + monto + " con tarjeta de credito"

clase PagoEnEfectivo implementa EstrategiaPago:

    metodo pagar(monto):
        imprimir "Pagando " + monto + " en efectivo."


//Contexto
clase CarritoCompras:

    constructor(estrategiaInicial: EstrategiaPago):
        this.estrategia = estrategiaInicial

    metodo setEstrategia(estrategia: EstrategiaPago):
        this.estrategia = estrategia

    metodo procesarPago(monto):
        this.estrategia.pagar(monto)


//Uso del patron
carrito = new CarritoCompras(new PagoConTarjetaCredito())
carrito.procesarPago(50.0)

carrito.setEstrategia(new PagoEnEfectivo())
carrito.procesarPago(20.0)