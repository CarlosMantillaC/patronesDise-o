/*
Categoría: Comportamental
Proposito: Proporcionar una manera de acceder secuencialmente a los elementos de un agregado
sin exponer su representación interna.
Como funciona:
El objeto iterable devuelve un iterador.
El iterador tiene metodos para obtener el siguiente elemento.
Ejemplo:
Recorrer una lista sin exponer como esta almacenada
*/

//Interfaz Iterador generico
interfaz Iterador:
    metodo hayMas()
    metodo siguiente()


//Clase libro
clase Libro:
    constructor(titulo):
        this.titulo = titulo
    
    metodo obtenerTitulo():
        imprimir this.titulo


//Coleccion
Clase Biblioteca:
    constructor():
        libros = []
    
    metodo agregarLibro(libro: Libro):
        libros.agregar(libro)
    
    metodo contarLibros():
        return libros.tamaño()

    metodo obtenerPosicionLibro(posicion):
        return libros[posicion]

    
//Clase iterador para Biblioteca
Clase BibliotecaIterator implementa Iterador:
    constructor(biblioteca):
        this.biblioteca = biblioteca
        this.posicionActual = 0

    metodo hayMas():
        return posicionActual < biblioteca.contarLibros()

    metodo siguiente():
        si hayMas():
            libro = biblioteca.obtenerPosicionLibro(posicionActual)
            posicionActual = posicionActual + 1
            return libro
        sino: 
            return null
    

//Uso del patron
biblioteca = new Biblioteca()
biblioteca.agregarLibro(new Libro("El Quijote"))
biblioteca.agregarLibro(new Libro("Cien años de soledad"))
biblioteca.agregarLibro(new Libro("Crónica de una muerte anunciada"))

iterador = new BibliotecaIterator(biblioteca)

mientras iterador.hayMas():
    libro = iterador.siguiente()
    si libro != nulo:
        imprimir libro.obtenerTitulo()