/*
Categoria: Comportamental
Proposito: Definir el esqueleto de un algoritmo en una operaci√≥n,
dejando algunos pasos a subclases.
Permite que las subclases redefinan ciertos pasos sin cambiar la
estructura del algoritmo.
Como funciona:
La clase base define el metodo plantilla con pasos generales.
Las subclases implementan los pasos espec√≠ficos.
Ejemplo:
Algoritmo general para preparar una bebida, con pasos concretos para te o cafe.
*/

//Clase abstracta con el metodo plantilla
clase abstracta BebidaCaliente:

    metodo prepararBebida():
        hervirAgua()
        agregarIngredientePrincipal()
        servirEnTaza()

    metodo hervirAgua():
        imprimir "Hervir agua"

    metodo servirEnTaza():
        imprimir "Servir en taza"

    // M√©todos que las subclases deben implementar
    metodo abstracto agregarIngredientePrincipal()


//Subclase: T√©
clase Te extends BebidaCaliente:

    metodo agregarIngredientePrincipal():
        imprimir "üçÉ A√±adir bolsita de t√©"

//Subclase: Caf√©
clase Cafe extends BebidaCaliente:

    metodo agregarIngredientePrincipal():
        imprimir "‚òï A√±adir caf√© molido"


//Uso del patron
bebida1 = new Te()
bebida1.prepararBebida()

bebida2 = new Cafe()
bebida2.prepararBebida()