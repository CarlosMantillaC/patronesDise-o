/*
Categoria: Comportamental
Proposito: Encapsular una solicitud como un objeto, permitiendo parametrizar clientes con
diferentes solicitudes, ponerlas en cola o deshacer operaciones.
Como funciona:
El comando implementa una interfaz que tiene un metodo ejectuar.
Se puede almacenar, pasar y ejecutar posteriormente.
Ejemplo:
Desacopla el emisor del comando (el boton) del receptor real (la luz).
Como un boton configurable de una app: tu decides que comando ejecutar sin modificar el boton.
*/

//interfaz Comando
interface Comando:
    metodo ejecutar()


//receptores (los objetos que realmente hacen el trabajo)
clase Luz:
    metodo encender():
        imprimir "La luz esta encendida"
    
    metodo apagar():
        imprimir "La luz esta apagada"


//Comandos Concretos
clase ComandoEncenderLuz implementa Comando:
    constructor(luz: Luz):
        this.luz = luz
    
    metodo ejectuar():
        this.luz.encender()

clase ComandoApagarLuz implementa Comando:
    constructor (luz: Luz):
        this.luz = luz

    metodo ejecutar():
        this.luz.apagar()


//Invocador (el que ejecuta el comando)
clase ControlRemoto:
    boton: Comando

    metodo configurarBoton(comando: Comando):
        this.boton = comando
    
    metodo presionarBoton():
        this.boton.ejectuar()


//Uso del patron
luz = new Luz()

comandoEncender = new ComandoEncenderLuz(luz)
comandoApagar = new ComandoApagarLuz(luz)

control = new ControlRemoto()

control.configurarBoton(comandoEncender)
control.presionarBoton()

control.configurarBoton(comandoApagar)
control.presionarBoton()