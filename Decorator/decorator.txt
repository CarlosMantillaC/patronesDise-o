/*
Categoria: Estructural
Proposito: AÃ±adir responsabilidades adicionales a un objeto dinamicamente,
sin afectar a otros objetos.
Como funciona:
El decorador tiene la misma interfaz que el objeto original y contiene una referencia
a ese objeto.
Extiende o modifica el comportamiento.
*/

//interfaz base
interfaz Bebida:
    metodo obtenerDescripcion()
    metodo obtenerCosto()


//Clase concreta
clase Cafe implementa Bebida:
    metodo obtenerDescripcion():
        imprimir "Cafe"
    
    metodo obtenerCosto():
        imprimir 5


//Decoradores concretos
clase Leche implementa Bebida:
    constructor(bebida: Bebida):
        this.bebida = bebida
    
    metodo obtenerDescripcion():
        imprimir bebida.obtenerDescripcion() + "con leche"

    metodo obtenerCosto():
        imprimir bebida.obtenerCosto() + 1


//Uso del patron
bebidaBase = new Cafe()

bebidaConLeche = new Leche(bebidaBase)

descripcion = bebidaConLeche.obtenerDescripcion()
costo = bebidaConLeche.obtenerCosto()

imprimir descripcion
imprimir costo
