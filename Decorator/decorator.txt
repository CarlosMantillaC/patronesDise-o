*/ Categoría: Estructural
Propósito: Añadir responsabilidades adicionales a un objeto dinámicamente, sin afectar a otros objetos.
Cómo funciona:

El decorador tiene la misma interfaz que el objeto original y contiene una referencia a ese objeto.

Extiende o modifica el comportamiento.
Ejemplo:
Agregar funcionalidades extras a una ventana gráfica como bordes o barras de scroll 
sin modificar la clase original.
*/


 // 1. Interfaz o clase base
interfaz Bebida {
    metodo obtenerDescripcion(): Texto
    metodo obtenerCosto(): Número
}

// 2. Clase concreta
clase Cafe implements Bebida {
    metodo obtenerDescripcion() {
        retornar "Café"
    }

    metodo obtenerCosto() {
        retornar 5.0
    }
}

// 3. Decoradores concretos (sin heredar de un decorador base)
clase Leche implements Bebida {
    propiedad bebida: Bebida

    constructor(bebida: Bebida) {
        this.bebida = bebida
    }

    metodo obtenerDescripcion() {
        retornar bebida.obtenerDescripcion() + ", con leche"
    }

    metodo obtenerCosto() {
        retornar bebida.obtenerCosto() + 1.0
    }
}

clase Chocolate implements Bebida {
    propiedad bebida: Bebida

    constructor(bebida: Bebida) {
        this.bebida = bebida
    }

    metodo obtenerDescripcion() {
        retornar bebida.obtenerDescripcion() + ", con chocolate"
    }

    metodo obtenerCosto() {
        retornar bebida.obtenerCosto() + 1.5
    }
}
