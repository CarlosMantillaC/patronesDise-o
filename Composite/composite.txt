/*
Categoria: Estructural
Proposito: Componer objetos en estructuras de arbol para representar jerarquias parte-todo.
Permite tratar objetos individuales y compuestos de forma uniforme.
Como funciona:
Los componentes pueden ser hojas (elementos simples) o compuestos (colecciones de componentes)
Se puede llamar el mismo metodo sobre ambos.
Ejemplo:
Sistema de archivos donde un directorio contiene archivos o subdirectorios.
*/

//Componente base
interfaz Componente:
    metodo operar()


//Hoja
clase Hoja implementa Componente:
    metodo operar():
        imprimir "Operación en hoja"


//Compuesto
clase Compuesto implementa Componente:
    constructor():
        hijos = [Componente]

    metodo agregar(c: Componente):
        hijos.agregar(c)

    metodo operar():
        imprimir "Operación en compuesto"
        para cada hijo en hijos:
            hijo.operar()


//Uso del patron
hoja1 = new Hoja()
hoja2 = new Hoja()

compuesto1 = new Compuesto()
compuesto1:agregar(hoja1)
compuesto2.agregar(hoja2)

raiz = new Compuesto()

raiz.agregar(compuesto1)
raiz.agregar(new Hoja())

raiz.operar()