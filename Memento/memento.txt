/*
Categoria: Comportamental
Propósito: Capturar y externalizar el estado interno de un objeto
sin violar la encapsulación, para poder restaurarlo mas tarde.
Como funciona:
El originador crea un memento que guarda su estado.
El caretaker guarda el memento y puede pedir restaurar el estado.
Ejemplo:
undo/redo en editores de texto
*/


//Clase memento: guarda el estado
clase Memento:
    
    constructor(estado):
        this.estado = estado
    
    metodo obtenerEstado():
        return this.estado


//Clase originador: el objeto principal cuyo estado queremos guardar
clase EditorTexto:

    this.contenido = ""

    metodo escribir(texto):
        this.contenido += texto
    
    metodo mostrar():
        imprimir "Contenido actual: " + this.contenido

    metodo crearMemento():
        return new Memento(this.contenido)

    metodo restaurar(memento: Memento):
        this.contenido = memento.obtenerEstado()


//Clase cuidador (caretaker): guarda y deshace los mementos
clase Historial:

    cambios = [Memento]

    metodo guardar(memento: Memento):
        this.cambios.agregar(memento)

    metodo deshacer():
        return this.cambios.desapilar()


//Uso del patron
editor = new EditorTexto()
historial = new Historial()

editor.escribir("Hola")
historial.guardar(editor.crearMemento())

editor.escribir(" Mundo")
historial.guardar(editor.crearMemento())

editor.escribir(" cruel")
editor.mostrar()  // Contenido actual: Hola mundo cruel

// Deshacer dos veces
editor.restaurar(historial.deshacer())
editor.mostrar()  // Contenido actual: Hola mundo

editor.restaurar(historial.deshacer())
editor.mostrar()  // Contenido actual: Hola