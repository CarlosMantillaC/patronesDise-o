/*
Categoría: Comportamental
Propósito: Capturar y externalizar el estado interno de un objeto sin violar la encapsulación, 
para poder restaurarlo más tarde.
Cómo funciona:

El originador crea un memento que guarda su estado.

El caretaker guarda el memento y puede pedir restaurar el estado.
Ejemplo:
Undo/redo en editores de texto.
*/

//Clase Memento: guarda el estado 
clase Memento {
    propiedad estado: String

    constructor(estado: String) {
        this.estado = estado
    }

    metodo getEstado() -> String {
        retornar this.estado
    }
}

//Clase originador: el objeto principal cuyo estado queremos guardar
clase EditorTexto {
    propiedad contenido: String

    constructor() {
        this.contenido = ""
    }

    metodo escribir(texto: String) {
        this.contenido += texto
    }

    metodo mostrar() {
        imprimir "Contenido actual: " + this.contenido
    }

    metodo crearMemento() -> Memento {
        retornar new Memento(this.contenido)
    }

    metodo restaurar(memento: Memento) {
        this.contenido = memento.getEstado()
    }
}

//Clase cuidador (Caretaker): guarda los mementos
clase Historial {
    propiedad cambios: Pila de Memento

    constructor() {
        this.cambios = nueva pila vacía
    }

    metodo guardar(memento: Memento) {
        this.cambios.apilar(memento)
    }

    metodo deshacer() -> Memento {
        retornar this.cambios.desapilar()
    }
}


//Uso del patron
editor = new EditorTexto()
historial = new Historial()

editor.escribir("Hola")
historial.guardar(editor.crearMemento())

editor.escribir(" mundo")
historial.guardar(editor.crearMemento())

editor.escribir(" cruel")
editor.mostrar()  // Contenido actual: Hola mundo cruel

// Deshacer dos veces
editor.restaurar(historial.deshacer())
editor.mostrar()  // Contenido actual: Hola mundo

editor.restaurar(historial.deshacer())
editor.mostrar()  // Contenido actual: Hola
