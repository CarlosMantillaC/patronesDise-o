/*
Categoria: Estructural
Proposito: El Adapter traduce los metodos que el cliente espera a los metodos
que realmente ofrece una clase existente(la clase adaptada)
    Cliente: espera trabajar con un objeto que tenga cierta interfaz (por ejemplo: mover())
    Clase existente: tiene otros metodos que no coinciden con lo que el cliente espera.
    Adapter: actua como un puente que traduce o adapta la forma de comunicarse
Ejemplo:
Un lector de tarjetas que solo acepta tarjetas con una interfaz espec√≠fica, 
pero tienes tarjetas con otra interfaz.
*/

//Interfaz esperada por el cliente
interfaz EnchufeEuropeo:
    metodo conectarEnchufeEuropeo()


//Clase existente con una interfaz incompatible
clase EnchufeAmericano:
    metodo conectarEnchufeAmericano():
        imprimir "Conectando a enchufe Americano"


//Adapter que traduce de una interfaz a otra
clase AdaptadorAmericanoAEuropeo implementa EnchufeEuropeo:

    constructor(enchufeAmericano: EnchufeAmericano):
        this.enchufeAmericano = enchufeAmericano
    
    metodo conectarEnchufeEuropeo():
        imprimir "Adaptador convierte de europeo a americano"
        enchufeAmericano.conectarEnchufeAmericano


enchufeAmericano = new EnchufeAmericano()
adaptador = new AdaptadorAmericanoAEuropeo(enchufeAmericano)
adaptador.conectarEnchufeEuropeo()