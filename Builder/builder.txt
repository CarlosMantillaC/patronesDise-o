/*
Categoria: Creacional
Proposito: Separar la construccion de un objeto complejo de su 
representacion para que el mismo proceso pueda crear diferentes representaciones.
Como funciona:
El director guia la construccion paso a paso
El builder construye cada parte del objeto
Ejemplo:
Construccion de un vehiculo que puede tener distintas configuraciones:
coche deportivo, coche familiar, etc.
*/

//Interfaz base
interfaz ComponenteHTML:
    metodo mostrar()

//Componentes concretos
clase Select implements ComponenteHTML {
    metodo mostrar(): Texto {
        retornar "<select>Mostrar</select>"
    }
}

clase Button implements ComponenteHTML {
    metodo mostrar(): Texto {
        retornar "<button>Mostrar</button>"
    }
}

clase Checkbox implements ComponenteHTML {
    metodo mostrar(): Texto {
        retornar "<input type='checkbox' /> Mostrar"
    }
}

//clase builder para construir un formulario HTML
clase Builder:
    nombresComponentes: []

    metodo agregar(nombre):
        nombresComponentes.agregar(nombre)
        return this //retorna el objeto completo

    metodo buid():
        variable html = ""

        para cada nombre en nombresComponentes:
            si nombre == "select": 
                html += new Select.mostrar()
            sino si nombre == "checkbox":
                html += new Checkbox.mostrar()
            sino si nombre == "button":
                html += new Button.mostrar()
            sino:
                imprimir "⚠️ Componente no válido: '" + nombre + "'"
        
        return new Form(html)

//clase Form que representa el resultado construido
clase Form:
    
    constructor(html):
        this.html = html
    
    metodo render():
        return html


//Uso del Builder
form = new Builder()
form.agregar("Select")
form.agregar("Button")
form.build()

imprimir form.render()

