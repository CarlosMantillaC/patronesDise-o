/*
Categoría: Comportamental
Propósito: Permitir que un objeto altere su comportamiento cuando su 
estado interno cambia, pareciendo que cambia de clase.
Cómo funciona:

El objeto tiene una referencia a un estado.

Cambia el estado para cambiar su comportamiento.
Ejemplo:
Un reproductor de música que cambia comportamiento según si está reproduciendo, 
pausado o detenido.
*/

//Interfaz
interfaz Estado {
    metodo play()
    metodo pause()
    metodo stop()
}

//Clases concretas de estado
clase EstadoReproduciendo implementa Estado {
    propiedad reproductor

    constructor(reproductor) {
        this.reproductor = reproductor
    }

    metodo play() {
        imprimir "Ya se está reproduciendo."
    }

    metodo pause() {
        imprimir "Pausando reproducción."
        reproductor.cambiarEstado(new EstadoPausado(reproductor))
    }

    metodo stop() {
        imprimir "Deteniendo reproducción."
        reproductor.cambiarEstado(new EstadoDetenido(reproductor))
    }
}

clase EstadoPausado implementa Estado {
    propiedad reproductor

    constructor(reproductor) {
        this.reproductor = reproductor
    }

    metodo play() {
        imprimir "Reanudando reproducción."
        reproductor.cambiarEstado(new EstadoReproduciendo(reproductor))
    }

    metodo pause() {
        imprimir "Ya está en pausa."
    }

    metodo stop() {
        imprimir "Deteniendo desde pausa."
        reproductor.cambiarEstado(new EstadoDetenido(reproductor))
    }
}

clase EstadoDetenido implementa Estado {
    propiedad reproductor

    constructor(reproductor) {
        this.reproductor = reproductor
    }

    metodo play() {
        imprimir "Iniciando reproducción."
        reproductor.cambiarEstado(new EstadoReproduciendo(reproductor))
    }

    metodo pause() {
        imprimir "No se puede pausar, está detenido."
    }

    metodo stop() {
        imprimir "Ya está detenido."
    }
}


//Contexto
clase ReproductorMusica {
    propiedad estado: Estado

    constructor() {
        this.estado = new EstadoDetenido(this)
    }

    metodo cambiarEstado(nuevoEstado: Estado) {
        this.estado = nuevoEstado
    }

    metodo play() {
        estado.play()
    }

    metodo pause() {
        estado.pause()
    }

    metodo stop() {
        estado.stop()
    }
}

//Uso del patron
reproductor = new ReproductorMusica()

reproductor.play()
// Iniciando reproducción.

reproductor.pause()
// Pausando reproducción.

reproductor.play()
// Reanudando reproducción.

reproductor.stop()
// Deteniendo reproducción.

reproductor.pause()
// No se puede pausar, está detenido.
