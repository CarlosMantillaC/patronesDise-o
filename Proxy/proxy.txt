/*
Categoría: Estructural
Proposito: Proveer un sustituto o representante de otro objeto para controlar
el acceso a este
Como funciona:
El proxy implementa la misma interfaz que el objeto real.
Agrega logica adicional antes, despues o en lugar del objeto.
Controla la creacion, acceso o comunicacion con el objeto real.
Ejemplo:
Proxy para acceder a un recurso remoto, o para añadir control de acceso.
*/


//Interfaz comun
interface video:
    metodo reproducir()


//Objeto real
clase VideoPrivado implementa Video:
    
    constructor(titulo):
        this.titulo = titulo

    metodo reproducir():
        imprimir "Reproduciendo video: " + this.titulo


//Proxy (controla el acceso al objeto real)
clase VideoProxy implementa Video:

    constructor(titulo, usuario):
        this.titulo = titulo
        this.usuario = usuario
        this.videoReal = null
        this.usuariosPermitidos = ["admin"]

    metodo reproducir():
        si this.usuarioTienePermiso():
            si this.videoReal es null:
                this.videoReal = new VideoPrivado(this.titulo)
            this.videoReal.reproducir()
        sino:
            imprimir "Acceso denegado para el usuario: " + this.usuario

    metodo usuarioTienePermiso():
        return this.usuariosPermitidos.contiene(this.usuario)


//Uso del patron
video1 = new VideoProxy("curso de patrones", "admin")
video1.reproducir()