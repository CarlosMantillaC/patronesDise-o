INTERFAZ Component
    MÉTODO ABSTRACTO render()

CLASE Button IMPLEMENTA Component
    MÉTODO render()
        RETORNAR "<button> </button>"

CLASE InputText IMPLEMENTA Component
    MÉTODO render()
        RETORNAR "<input />"

CLASE Select IMPLEMENTA Component
    MÉTODO render()
        RETORNAR "<select> </select>"

---------------------------------------
PATRÓN DECORATOR
---------------------------------------
CLASE TypeDecorator IMPLEMENTA Component
    ATRIBUTO component

    CONSTRUCTOR(component)
        ASIGNAR this.component = component

    MÉTODO render()
        RETORNAR component.render()

CLASE InputTypeDecorator EXTENDIENDO TypeDecorator
    CONSTRUCTOR(component)
        LLAMAR super CONSTRUCTOR con component

    MÉTODO render()
        html = component.render()
        REEMPLAZAR "<input" POR '<input type="radio"' EN html
        RETORNAR html

---------------------------------------
PATRÓN COMPOSITE
---------------------------------------
CLASE Formulario IMPLEMENTA Component
    ATRIBUTO components (lista vacía)

    MÉTODO add_component(comp)
        AGREGAR comp A components

    MÉTODO render()
        html = ""
        PARA cada comp EN components
            html = html + comp.render()
        FIN PARA
        RETORNAR "<div>" + html + "</div>"

---------------------------------------
PATRÓN ADAPTER
---------------------------------------
CLASE SalidaAdapter
    ATRIBUTO obj

    CONSTRUCTOR(obj)
        SI obj ES instancia DE Component ENTONCES
            ASIGNAR this.obj = obj
        SINO SI obj ES instancia DE EtiquetaTexto ENTONCES
            ASIGNAR this.obj = EtiquetaTextoAdapter(obj)
        SINO
            ASIGNAR this.obj = NULO
        FIN SI

    MÉTODO getEntradaFormada()
        SI obj NO ES NULO ENTONCES
            RETORNAR obj.render()
        SINO
            RETORNAR "<!-- componente no compatible -->"
        FIN SI

CLASE EtiquetaTexto
    MÉTODO generar_etiqueta()
        RETORNAR "<label> </label>"

CLASE EtiquetaTextoAdapter IMPLEMENTA Component
    ATRIBUTO etiqueta_texto

    CONSTRUCTOR(etiqueta_texto)
        ASIGNAR this.etiqueta_texto = etiqueta_texto

    MÉTODO render()
        RETORNAR etiqueta_texto.generar_etiqueta()

---------------------------------------
PATRÓN SINGLETON
---------------------------------------
CLASE Render
    ATRIBUTO ESTÁTICO _instance = NULO

    CONSTRUCTOR()
        SI Render._instance NO ES NULO ENTONCES
            LANZAR ERROR "Esta clase es Singleton. Usa getInstance()"
        FIN SI
        ASIGNAR Render._instance = this

    MÉTODO ESTÁTICO getInstance()
        SI Render._instance ES NULO ENTONCES
            CREAR nueva instancia Render()
        FIN SI
        RETORNAR Render._instance

    MÉTODO render_html(contenido)
        RETORNAR "<html><body><form>" + contenido + "</form></body></html>"

---------------------------------------
APLICACIÓN PRINCIPAL
---------------------------------------
CLASE Application
    MÉTODO ESTÁTICO main()

        etiqueta_externa = NUEVA EtiquetaTexto()
        adaptador_etiqueta = NUEVO EtiquetaTextoAdapter(etiqueta_externa)

        formulario_principal = NUEVO Formulario()

        formulario_anidado = NUEVO Formulario()
        formulario_anidado.add_component(NUEVO Button())
        formulario_anidado.add_component(NUEVO InputText())
        formulario_anidado.add_component(adaptador_etiqueta)

        formulario_principal.add_component(formulario_anidado)
        formulario_principal.add_component(NUEVO Select())
        formulario_principal.add_component(NUEVO InputText())

        adaptador = NUEVO SalidaAdapter(formulario_principal)
        salida_html = adaptador.getEntradaFormada()

        render = Render.getInstance()
        html_completo = render.render_html(salida_html)

        RETORNAR html_completo

FIN CLASE

IMPRIMIR Application.main()
