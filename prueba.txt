INTERFACE Component:
    METHOD render()

CLASS Button IMPLEMENTS Component:
    METHOD render():
        RETURN "<button> </button>"

CLASS Select IMPLEMENTS Component:
    METHOD render():
        RETURN "<select> </select>"

CLASS InputText IMPLEMENTS Component:
    METHOD render():
        RETURN "<input />"

# ==============================
# PATRÓN ADAPATER
# ==============================

class TypeDecorator(Component):
    def __init__(self, component):
        self.component = component

    def render(self):
        return self.component.render()
    
class InputTypeDecorator(TypeDecorator):
    def __init__(self, component):
        super().__init__(component)

    def render(self):
        html = self.component.render()
        html = html.replace("<input", f'<input type="radio"')
        return html

// =============================
// Patrón Composite
// =============================

INTERFACE SalidaBuilder:
    METHOD get_components()

CLASS Formulario IMPLEMENTS SalidaBuilder:
    ATTRIBUTE components : [Component]

    METHOD add_component(comp):
        self.components.append(comp)

    METHOD get_components():
        RETURN components

// =============================
// Patrón Adapter
// =============================

CLASS SalidaAdapter:
    ATTRIBUTE form : SalidaBuilder

    def getEntradaFormada():
        html = ""
        for comp in form.get_components():
            html += comp.render()
        return html

// =============================
// Patrón Singleton
// =============================

class Render:
    _instance = None

    def __init__(self):
        if Render._instance is not None:
            raise Exception("Esta clase es Singleton. Usa getInstance()")
        Render._instance = self

    @staticmethod
    def getInstance():
        if Render._instance is None:
            Render()
        return Render._instance

    def render_html(self, contenido):
        return f"<html><body><form>{contenido}</form></body></html>"

// =============================
// Aplicación principal para ejecutar la composición
// =============================

CLASS Application:
    MÉTODO estático main():

        boton = NUEVO Button()
        input = NUEVO InputText()
        select = NUEVO Select()

        radio = NUEVO InputTypeDecorator(input)

        formulario = NUEVO Formulario()
        formulario.add_component(input)
        formulario.add_component(select)
        formulario.add_component(boton)
        formulario.add_component(radio)

        adaptador = NUEVO SalidaAdapter(formulario)
        salida_html = adaptador.getEntradaFormada()

        render = Render.getInstance()
        html_completo = render.render_html(salida_html)

        RETURN html_completo

IMPRIMIR Application.main()
