/*
Categoría: Comportamental
Propósito: Definir una dependencia uno a muchos entre objetos para que cuando uno cambie, 
todos sus dependientes sean notificados y actualizados automáticamente.
Cómo funciona:
Un sujeto mantiene una lista de observadores.
Cuando el sujeto cambia, notifica a todos.
Ejemplo:
Un sistema de notificaciones donde varios módulos escuchan cambios.
*/

// Interfaz del Observador
interfaz Notificador:
    metodo notificar()


// Observadores concretos
clase EmailNotificador implementa Notificador:

    constructor(nombre):
        this.nombre = nombre

    metodo notificar(mensaje):
        imprimir "[EMAIL] Notificación a " + nombre + ": " + mensaje

clase SmsNotificador implementa Notificador:

    constructor(nombre):
        this.nombre = nombre

    metodo notificar(mensaje):
        imprimir "[SMS] Notificación a " + nombre + ": " + mensaje


// Sujeto observado
clase CanalYouTube:

    metodo constructor(nombreCanal):
        this.nombreCanal = nombreCanal
        suscriptores = []

    metodo agregarSuscriptor(notificador):
        añadir notificador A suscriptores

    metodo subirVideo(titulo):
        imprimir "[" + nombreCanal + "] Nuevo video subido: " + titulo
        para sub en suscriptores:
            sub.notificar("Nuevo video: " + titulo)


//Uso del patron

canal = CanalYouTube("TechMind")

email1 = EmailNotificador("Ana")
sms1 = SmsNotificador("Luis")

canal.agregarSuscriptor(email1)
canal.agregarSuscriptor(sms1)

canal.subirVideo("Observer Pattern en Swift")
